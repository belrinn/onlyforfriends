import os
import re
import json
import hashlib
import subprocess
import threading
import ctypes
import struct
import time
import shutil
import tempfile
import zipfile
import pefile
import requests
import psutil
import socket
import winreg
from pathlib import Path
import tkinter as tk
from tkinter import messagebox, filedialog, ttk
import datetime

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ —É–≥—Ä–æ–∑ —Å —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–æ–π –Ω–∞ RAT
THREAT_DB = {
    "miner": {
        "patterns": [r"xmrig", r"cryptonight", r"xmr-eu", r"monero", r"nanopool", r"c3pool"],
        "extensions": [".exe", ".js", ".py", ".ps1", ".vbs", ".scr", ".bat"],
        "threat_level": 3,
        "name": "–ö—Ä–∏–ø—Ç–æ–º–∞–π–Ω–µ—Ä",
        "mechanism": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –≤–∞—à–µ–≥–æ –ü–ö –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –±–µ–∑ –≤–∞—à–µ–≥–æ –≤–µ–¥–æ–º–∞",
        "mitigation": "–ù–µ–π—Ç—Ä–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–∞–π–Ω–∏–Ω–≥–∞"
    },
    "stealer": {
        "patterns": [
            r"keylogger", r"stealc", r"cookies\.sqlite", r"discord_token", 
            r"Login Data", r"Web Data", r"Cookies", r"\.netstealer", 
            r"Grabber", r"TokenLogger", r"DiscordInject", r"Clipboard"
        ],
        "extensions": [".dll", ".bin", ".dat", ".cfg", ".exe", ".log", ".tmp"],
        "threat_level": 8,
        "name": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–∏–ª–µ—Ä",
        "mechanism": "–ö—Ä–∞–¥–µ—Ç –ø–∞—Ä–æ–ª–∏, –∫—É–∫–∏, –¥–∞–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç –∏ –¥—Ä—É–≥—É—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
        "mitigation": "–û–±–µ–∑–≤—Ä–µ–¥–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∫—Ä–∞–∂–∏ –¥–∞–Ω–Ω—ã—Ö"
    },
    "rat": {
        "patterns": [
            r"C2_Server", r"RemoteShell", r"HiddenInstall", r"BackConnect", 
            r"Keylogger", r"ScreenSpy", r"ReverseShell", r"PortListener",
            r"PayloadInject", r"Persistance", r"AutoUpdate", r"VictimID",
            r"StartupPersistence", r"RemoteDesktop", r"WebcamCapture"
        ],
        "extensions": [".exe", ".dll", ".jar", ".docm", ".xlsm", ".pptm"],
        "threat_level": 9,
        "name": "–£–¥–∞–ª—ë–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø (RAT)",
        "mechanism": "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫—É –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π",
        "mitigation": "–ù–µ–π—Ç—Ä–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
    },
    "backdoor": {
        "patterns": [
            r"shell_exec", r"Backdoor", r"BindShell", r"ReverseTCP", 
            r"ProcessHollow", r"ReflectiveDLL", r"Metasploit", r"CobaltStrike",
            r"Shellcode", r"Meterpreter", r"PrivEscalation", r"CredDump"
        ],
        "extensions": [".exe", ".dll", ".bin", ".vbs", ".ps1"],
        "threat_level": 10,
        "name": "–ë—ç–∫–¥–æ—Ä",
        "mechanism": "–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä—ã—Ç—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –≤ –æ–±—Ö–æ–¥ —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "mitigation": "–ó–∞–∫—Ä—ã—Ç—å –±—ç–∫–¥–æ—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"
    },
    "spyware": {
        "patterns": [
            r"ScreenCapture", r"AudioRecord", r"KeyPressMonitor", 
            r"ClipboardLogger", r"FileMonitor", r"NetworkSniffer"
        ],
        "extensions": [".exe", ".dll", ".sys", ".bin"],
        "threat_level": 7,
        "name": "–®–ø–∏–æ–Ω—Å–∫–æ–µ –ü–û",
        "mechanism": "–¢–∞–π–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ",
        "mitigation": "–û—Ç–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å–ª–µ–∂–µ–Ω–∏—è"
    },
    "rootkit": {
        "patterns": [
            r"KernelMode", r"DriverLoad", r"SSDTHook", r"IDTHook",
            r"DKOM", r"ProcessHiding", r"FileHiding", r"RegistryHiding"
        ],
        "extensions": [".sys", ".dll", ".exe", ".bin"],
        "threat_level": 10,
        "name": "–†—É—Ç–∫–∏—Ç",
        "mechanism": "–°–∫—Ä—ã–≤–∞–µ—Ç –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "mitigation": "–ù–µ–π—Ç—Ä–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä—É—Ç–∫–∏—Ç-—Ñ—É–Ω–∫—Ü–∏–∏"
    },
    "lime_rat": {
        "patterns": [
            r"LimeRAT", r"PlasmaDNS", r"AsyncRAT", r"NjRat", r"QuasarRAT",
            r"DiscordTokenGrabber", r"Keylogger", r"ScreenSpy", r"WebcamCapture",
            r"185\.159\.82\.104", r"185\.231\.154\.78", r":5577", r":4488",
            r"PersistanceModule", r"StartupPersistence", r"VictimIdentifier",
            r"KernelModeRootkit", r"ProcessInjection", r"CredentialDump",
            r"AutoUpdateFromTor", r"UEFI_Persistence", r"SPI_Flash",
            r"DiscordWebhook", r"TelegramAPI", r"StealCryptoWallets",
            r"KillAV", r"DisableFirewall", r"BypassUAC",
            r"LimeRAT_v0\.1\.9\.2", 
            r"Client\.Settings", 
            r"Server\.Host", 
            r"Plasma\s?DNS",
            r"LimeLogger", 
            r"LimeBuilder",
            r"Socket\.Receive", 
            r"Socket\.Send",
            r"AES_Encrypt",
            r"AES_Decrypt",
            r"Install\s+for\s+Persistence",
            r"Anti\s+Analysis",
            r"Disable\s+Windows\s+Defender",
            r"Hidden\s+Desktop",
            r"Remote\s+Shell",
            r"C2\s+Reconnect",
            r"BTC_Address",
            r"XMR_Wallet",
            r"Mine\s+Monero"
        ],
        "extensions": [
            ".exe", ".dll", ".jar", ".vbs", ".ps1", ".bin", ".sys",
            ".jpg", ".png", ".txt", ".tmp", ".log", ".dat", ".cfg",
            ".scr", ".cpl", ".msi", ".com"
        ],
        "threat_level": 10,
        "name": "LimeRAT",
        "mechanism": "–£–¥–∞–ª—ë–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∫—Ä–∞–∂–∏ –¥–∞–Ω–Ω—ã—Ö, –º–∞–π–Ω–∏–Ω–≥–∞ –∏ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
        "mitigation": "–ü–æ–ª–Ω–∞—è –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è –±—ç–∫–¥–æ—Ä–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
    },
    "all_rats": {
        "patterns": [
            r"RemoteShell", r"BackConnect", r"C2_Server", r"ReverseShell",
            r"PortListener", r"PayloadInject", r"VictimID", r"AutoUpdate",
            r"HiddenConnection", r"EncryptedComm", r"CommandControl",
            r"BotCommand", r"TaskScheduler", r"RemoteControl",
            r"Keylogger", r"ScreenCapture", r"WebcamCapture",
            r"FileStealer", r"CredentialHarvester", r"PersistenceModule",
            r"ProcessInjection", r"BypassUAC", r"DisableFirewall",
            r"KillAV", r"DiscordToken", r"CryptoWallet",
            r"StartupRegistry", r"ScheduledTask", r"ServiceInstaller",
            r"ReflectiveDLL", r"ProcessHollowing", r"Metasploit",
            r"CobaltStrike", r"DNS_Tunneling", r"TorConnection"
        ],
        "extensions": [".exe", ".dll", ".jar", ".docm", ".xlsm", ".pptm", ".js", ".vbs", ".ps1"],
        "threat_level": 10,
        "name": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π RAT",
        "mechanism": "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫—É –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–∏—Å—Ç–µ–º–æ–π",
        "mitigation": "–ù–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö RAT-—Ñ—É–Ω–∫—Ü–∏–π"
    }
}

# –¢–æ—á–Ω—ã–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Windows
SYSTEM_WHITELIST = {
    "C:\\Windows\\System32": [
        "kernel32.dll", "user32.dll", "gdi32.dll", "ntdll.dll", 
        "advapi32.dll", "msvcrt.dll", "shell32.dll", "shlwapi.dll",
        "comctl32.dll", "ws2_32.dll", "ole32.dll", "rpcrt4.dll",
        "wininet.dll", "crypt32.dll", "secur32.dll", "oleaut32.dll",
        "imm32.dll", "msctf.dll", "dwmapi.dll", "uxtheme.dll",
        "svchost.exe", "csrss.exe", "wininit.exe", "services.exe",
        "lsass.exe", "winlogon.exe", "explorer.exe", "dwm.exe",
        "taskhostw.exe", "ctfmon.exe", "conhost.exe", "sihost.exe",
        "AggregatorHost.exe", "AggregatorHost.dll", "RuntimeBroker.exe",
        "smss.exe", "spoolsv.exe", "dllhost.exe", "backgroundTaskHost.exe",
        "srms.dat"
    ],
    "C:\\Windows\\SysWOW64": [
        "kernel32.dll", "user32.dll", "gdi32.dll", "ntdll.dll",
        "advapi32.dll", "msvcrt.dll", "shell32.dll", "shlwapi.dll",
        "comctl32.dll", "ws2_32.dll", "ole32.dll", "rpcrt4.dll",
        "wininet.dll", "crypt32.dll", "secur32.dll", "oleaut32.dll",
        "svchost.exe", "dllhost.exe", "rundll32.exe", "notepad.exe",
        "calc.exe", "mspaint.exe", "cmd.exe", "powershell.exe",
        "regedit.exe", "taskmgr.exe", "control.exe", "explorer.exe"
    ],
    "C:\\Windows": [
        "explorer.exe", "winlogon.exe", "csrss.exe", "smss.exe"
    ]
}

# –°–∏–≥–Ω–∞—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø–µ—Ä–≤—ã–µ 16 –±–∞–π—Ç)
SYSTEM_SIGNATURES = {
    b'MZ\x90\x00\x03\x00\x00\x00\x04\x00\x00\x00\xFF\xFF': "Windows Executable",
    b'MZ\x90\x00\x03\x00\x00\x00\x04\x00\x00\x00\x00\x00': "Windows DLL",
    b'\x4D\x5A': "Generic Windows Executable"
}

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
CHAT_PATTERNS = [
    r"chat\.integration", r"telegram\.api", r"discord\.webhook", 
    r"slack\.hook", r"irc\.protocol", r"xmpp\.client",
    r"chat\.module", r"messenger\.api", r"webhook\.url",
    r"notification\.channel", r"bot\.token", r"api\.telegram\.org",
    r"discordapp\.com", r"hooks\.slack\.com", r"chat\.transport"
]

# –ù–æ–≤—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ARCHIVE_PASSWORDS = ["infected", "malware", "virus", "rat", "lime", "password", "12345", "qwerty"]
DECOMPRESSION_LOCK = threading.Lock()
MONITORED_FOLDERS = {}

class MatrixDefender(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("üîÆ MATRIX HEALER v5.0")
        self.geometry("900x600")
        self.configure(bg="black")
        
        # –£–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É –æ–∫–Ω–∞
        self.iconbitmap(None)
        
        # –°—Ç–∏–ª—å Matrix
        self.terminal = tk.Text(self, bg="black", fg="#00ff00", 
                               font=("Consolas", 12), insertbackground="#00ff00")
        self.terminal.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_frame = tk.Frame(self, bg="black")
        self.control_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.scan_btn = tk.Button(
            self.control_frame, text="–ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", command=self.start_full_scan,
            bg="#003300", fg="#00ff00", font=("Tahoma", 10, "bold"),
            relief="raised", bd=3
        )
        self.scan_btn.pack(side=tk.LEFT, padx=5)

        self.file_btn = tk.Button(
            self.control_frame, text="–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", command=self.select_file,
            bg="#003300", fg="#00ff00", font=("Tahoma", 10, "bold"),
            relief="raised", bd=3
        )
        self.file_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ñ–∏–∫—Å–∞
        self.folder_btn = tk.Button(
            self.control_frame, text="–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É", command=self.select_folder,
            bg="#003366", fg="#00ffff", font=("Tahoma", 10, "bold"),
            relief="raised", bd=3
        )
        self.folder_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        self.restore_btn = tk.Button(
            self.control_frame, text="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª", command=self.restore_file,
            bg="#330033", fg="#ff00ff", font=("Tahoma", 10, "bold"),
            relief="raised", bd=3
        )
        self.restore_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.stop_btn = tk.Button(
            self.control_frame, text="‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", command=self.stop_scan,
            bg="#330000", fg="#ff0000", font=("Tahoma", 10, "bold"),
            relief="raised", bd=3, state=tk.DISABLED
        )
        self.stop_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.deep_scan_btn = tk.Button(
            self.control_frame, text="–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ RAT", command=self.start_deep_scan,
            bg="#330033", fg="#ff00ff", font=("Tahoma", 10, "bold"),
            relief="raised", bd=3
        )
        self.deep_scan_btn.pack(side=tk.LEFT, padx=5)
        
        self.network_btn = tk.Button(
            self.control_frame, text="–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ C2", command=self.block_c2_connections,
            bg="#660000", fg="#ff6666", font=("Tahoma", 10, "bold"),
            relief="raised", bd=3
        )
        self.network_btn.pack(side=tk.LEFT, padx=5)
        
        self.memory_btn = tk.Button(
            self.control_frame, text="–ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏", command=self.scan_memory,
            bg="#663300", fg="#ffcc00", font=("Tahoma", 10, "bold"),
            relief="raised", bd=3
        )
        self.memory_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        self.restore_point_btn = tk.Button(
            self.control_frame, text="–¢–æ—á–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", command=self.system_restore,
            bg="#006633", fg="#00ff99", font=("Tahoma", 10, "bold"),
            relief="raised", bd=3
        )
        self.restore_point_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        self.monitor_btn = tk.Button(
            self.control_frame, text="üõ°Ô∏è –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", command=self.toggle_monitoring,
            bg="#003366", fg="#00ffff", font=("Tahoma", 10, "bold"),
            relief="raised", bd=3
        )
        self.monitor_btn.pack(side=tk.LEFT, padx=5)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–≥—Ä–æ–∑—ã
        self.threat_level = tk.Label(
            self.control_frame, text="–£–†–û–í–ï–ù–¨ –£–ì–†–û–ó–´: –ù–ï–ò–ó–í–ï–°–¢–ï–ù", 
            bg="black", fg="#00ff00", font=("Tahoma", 10, "bold")
        )
        self.threat_level.pack(side=tk.RIGHT, padx=10)
        
        self.log("MATRIX HEALER v5.0 –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù")
        self.log(f"–°–ò–°–¢–ï–ú–ù–ê–Ø –î–ê–¢–ê: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log("–†–ï–ñ–ò–ú –õ–ï–ß–ï–ù–ò–Ø –§–ê–ô–õ–û–í –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")
        self.log("–ì–û–¢–û–í –ö –ù–ï–ô–¢–†–ê–õ–ò–ó–ê–¶–ò–ò –£–ì–†–û–ó")
        
        self.scan_active = False
        self.detected_threats = []
        self.skip_system_files = True
        self.scan_thread = None
        self.auto_fix = False  # –§–ª–∞–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.monitoring_active = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∏–≥–Ω–∞—Ç—É—Ä
        self.log("–ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô –°–ò–ì–ù–ê–¢–£–†...")
        threading.Thread(target=self.update_threat_db, daemon=True).start()

    def log(self, message):
        self.terminal.insert(tk.END, f">> {message}\n")
        self.terminal.see(tk.END)
        self.update()
        
    def start_full_scan(self):
        if self.scan_active:
            return
            
        self.scan_active = True
        self.detected_threats = []
        self.log("–ù–ê–ß–ò–ù–ê–Æ –ü–û–õ–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´...")
        self.threat_level.config(text="–£–†–û–í–ï–ù–¨ –£–ì–†–û–ó–´: –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï", fg="#00ff00")
        self.stop_btn.config(state=tk.NORMAL)
        self.scan_thread = threading.Thread(target=self.full_scan, daemon=True)
        self.scan_thread.start()

    def start_deep_scan(self):
        """–ó–∞–ø—É—Å–∫ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è RAT"""
        if self.scan_active:
            return
            
        self.scan_active = True
        self.detected_threats = []
        self.log("–ó–ê–ü–£–°–ö –ì–õ–£–ë–û–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê RAT...")
        self.threat_level.config(text="–£–†–û–í–ï–ù–¨ –£–ì–†–û–ó–´: –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó", fg="#ff00ff")
        self.stop_btn.config(state=tk.NORMAL)
        self.scan_thread = threading.Thread(target=self.deep_rat_scan, daemon=True)
        self.scan_thread.start()

    def stop_scan(self):
        if self.scan_active:
            self.scan_active = False
            self.log("–°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
            self.threat_level.config(text="–£–†–û–í–ï–ù–¨ –£–ì–†–û–ó–´: –ü–†–ï–†–í–ê–ù–û", fg="#ff0000")
            self.stop_btn.config(state=tk.DISABLED)
            if self.scan_thread and self.scan_thread.is_alive():
                self.scan_thread.join(timeout=1.0)

    def select_file(self):
        if self.scan_active:
            return
            
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª",
            filetypes=[("–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã", "*.exe *.dll *.bat *.ps1"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if file_path:
            self.scan_active = True
            self.detected_threats = []
            self.log(f"–°–ö–ê–ù–ò–†–£–Æ –í–´–ë–†–ê–ù–ù–´–ô –§–ê–ô–õ: {file_path}")
            self.threat_level.config(text="–£–†–û–í–ï–ù–¨ –£–ì–†–û–ó–´: –ê–ù–ê–õ–ò–ó", fg="#00ff00")
            self.stop_btn.config(state=tk.NORMAL)
            self.scan_thread = threading.Thread(target=self.scan_file, args=(file_path,), daemon=True)
            self.scan_thread.start()
            
    def select_folder(self):
        if self.scan_active:
            return
            
        folder_path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–µ—á–µ–Ω–∏—è")
        if folder_path:
            self.auto_fix = True
            self.log(f"–ê–ö–¢–ò–í–ò–†–û–í–ê–ù –ê–í–¢–û–õ–ï–ß–ï–ù–ò–ï –î–õ–Ø –ü–ê–ü–ö–ò: {folder_path}")
            self.log("–í–°–ï –£–ì–†–û–ó–´ –ë–£–î–£–¢ –ù–ï–ô–¢–†–ê–õ–ò–ó–û–í–ê–ù–´ –ë–ï–ó –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø!")
            self.scan_active = True
            self.detected_threats = []
            self.threat_level.config(text="–£–†–û–í–ï–ù–¨ –£–ì–†–û–ó–´: –ê–í–¢–û–õ–ï–ß–ï–ù–ò–ï", fg="#ff00ff")
            self.stop_btn.config(state=tk.NORMAL)
            self.scan_thread = threading.Thread(target=self.scan_folder, args=(folder_path,), daemon=True)
            self.scan_thread.start()
            
    def restore_file(self):
        if self.scan_active:
            return
            
        file_path = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        if file_path:
            backup_path = file_path + ".matrix_backup"
            if os.path.exists(backup_path):
                try:
                    shutil.copy2(backup_path, file_path)
                    os.remove(backup_path)
                    self.log(f"‚ôªÔ∏è –§–ê–ô–õ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù –ò–ó –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò: {file_path}")
                except Exception as e:
                    self.log(f"‚õî –û–®–ò–ë–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø: {str(e)}")
            else:
                self.log(f"‚õî –†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø –ù–ï –ù–ê–ô–î–ï–ù–ê: {file_path}")

    def toggle_monitoring(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.monitoring_active:
            self.monitoring_active = False
            self.monitor_btn.config(text="üõ°Ô∏è –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            self.log("–ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–ü–û–ö –û–°–¢–ê–ù–û–í–õ–ï–ù")
        else:
            self.monitoring_active = True
            self.monitor_btn.config(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            self.log("–ê–ö–¢–ò–í–ò–†–û–í–ê–ù –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–ü–û–ö")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞–ø–æ–∫
            for folder_path in MONITORED_FOLDERS:
                self.start_folder_monitoring(folder_path)

    def detect_evasive_techniques(self, file_path):
        """–ê–Ω—Ç–∏-—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –Ω–æ–≤—ã—Ö RAT"""
        techniques = []
        try:
            pe = pefile.PE(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–ø–∞–∫–æ–≤–∫—É
            if any(section.Name.startswith(b"UPX") for section in pe.sections):
                techniques.append("UPX Packer")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
            if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
                for entry in pe.DIRECTORY_ENTRY_IMPORT:
                    if entry.dll.decode().lower() == "reflective_loader.dll":
                        techniques.append("Reflective DLL Injection")
                        break
                        
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω—Ç–∏-–æ—Ç–ª–∞–¥–∫—É
            if self.check_anti_debug(file_path):
                techniques.append("Anti-Debug Techniques")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã
            if self.check_anti_vm(file_path):
                techniques.append("Anti-VM Techniques")
                
        except Exception as e:
            self.log(f"–û–®–ò–ë–ö–ê –ê–ù–¢–ò-–≠–í–†–ò–°–¢–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê: {str(e)}")
            
        return techniques

    def check_anti_debug(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–Ω—Ç–∏-–æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫"""
        try:
            with open(file_path, "rb") as f:
                content = f.read(1024 * 1024)  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 1MB
                
                anti_debug_patterns = [
                    b"IsDebuggerPresent", b"CheckRemoteDebugger", b"OutputDebugString",
                    b"CloseHandle", b"ZwSetInformationThread", b"int\x2d"
                ]
                
                for pattern in anti_debug_patterns:
                    if pattern in content:
                        return True
        except:
            pass
        return False

    def check_anti_vm(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–Ω—Ç–∏-VM —Ç–µ—Ö–Ω–∏–∫"""
        try:
            with open(file_path, "rb") as f:
                content = f.read(1024 * 1024)  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 1MB
                
                anti_vm_patterns = [
                    b"VMware", b"VBox", b"VirtualBox", b"Xen", 
                    b"QEMU", b"Hyper-V", b"KVM", b"WMI"
                ]
                
                for pattern in anti_vm_patterns:
                    if pattern in content:
                        return True
        except:
            pass
        return False

    def update_threat_db(self):
        """–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤ —Å–∏–≥–Ω–∞—Ç—É—Ä"""
        try:
            self.log("–ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô –ë–ê–ó–´ –£–ì–†–û–ó...")
            response = requests.get("https://raw.githubusercontent.com/securitydb/threat-db/main/threat_db.json", timeout=10)
            global THREAT_DB
            new_db = response.json()
            
            # –°–ª–∏—è–Ω–∏–µ –±–∞–∑ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
            updated = False
            for key, value in new_db.items():
                if key not in THREAT_DB:
                    THREAT_DB[key] = value
                    self.log(f"–î–û–ë–ê–í–õ–ï–ù–ê –ù–û–í–ê–Ø –°–ò–ì–ù–ê–¢–£–†–ê: {value['name']}")
                    updated = True
            
            if updated:
                self.log("–ë–ê–ó–ê –£–ì–†–û–ó –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–ê")
            else:
                self.log("–û–ë–ù–û–í–õ–ï–ù–ò–Ø –ù–ï –¢–†–ï–ë–£–Æ–¢–°–Ø")
            return True
        except Exception as e:
            self.log(f"–û–®–ò–ë–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–ó–´: {str(e)}")
            return False

    def block_c2_connections(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —É–≥—Ä–æ–∑ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ C2)"""
        if os.name != 'nt':
            self.log("–ë–õ–û–ö–ò–†–û–í–ö–ê C2 –î–û–°–¢–£–ü–ù–ê –¢–û–õ–¨–ö–û –ù–ê WINDOWS")
            return
            
        try:
            self.log("–ë–õ–û–ö–ò–†–û–í–ö–ê –ò–ó–í–ï–°–¢–ù–´–• –°–ï–†–í–ï–†–û–í C2...")
            
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Windows Firewall
            c2_ips = "185.159.82.104,185.231.154.78,94.103.81.235,5.188.206.163,192.168.1.100-192.168.1.200"
            subprocess.run(
                ["netsh", "advfirewall", "firewall", "add", "rule", 
                "name=\"Matrix C2 Block\"", "dir=out", "action=block", 
                f"remoteip={c2_ips}"],
                check=True,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤ hosts —Ñ–∞–π–ª–µ
            hosts_path = r"C:\Windows\System32\drivers\etc\hosts"
            c2_domains = [
                "malicious-domain.com",
                "c2-server.net",
                "rat-command.com",
                "lime-rat.org",
                "njrat-c2.org",
                "quasar-command.com"
            ]
            
            with open(hosts_path, "a") as hosts:
                hosts.write("\n# Matrix Defender C2 Block\n")
                for domain in c2_domains:
                    hosts.write(f"0.0.0.0 {domain}\n")
                    hosts.write(f":: {domain}\n")
            
            self.log("–°–ï–†–í–ï–†–´ C2 –£–°–ü–ï–®–ù–û –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´")
        except Exception as e:
            self.log(f"–û–®–ò–ë–ö–ê –ë–õ–û–ö–ò–†–û–í–ö–ò C2: {str(e)}")

    def scan_memory(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        self.log("–°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ü–ê–ú–Ø–¢–ò –ù–ê –ü–†–ï–î–ú–ï–¢ –í–ù–ï–î–†–ï–ù–ò–ô RAT...")
        threading.Thread(target=self.scan_memory_for_injections, daemon=True).start()
    
    def scan_memory_for_injections(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        suspicious = []
        
        try:
            for proc in psutil.process_iter(['pid', 'name', 'memory_maps']):
                try:
                    process_name = proc.info['name'].lower()
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö RAT –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                    rat_processes = [
                        "njrat", "lime", "quasar", "async", "plasma", 
                        "remcos", "nanocore", "darkcomet", "poisonivy",
                        "hworm", "warzone", "netwire", "hawkeye"
                    ]
                    
                    if any(rat in process_name for rat in rat_processes):
                        suspicious.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω RAT-–ø—Ä–æ—Ü–µ—Å—Å: {proc.info['name']} (PID: {proc.info['pid']})")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö DLL
                    if 'memory_maps' in proc.info and proc.info['memory_maps']:
                        for mem_map in proc.info['memory_maps']:
                            if mem_map.path and "dll" in mem_map.path.lower():
                                dll_name = os.path.basename(mem_map.path).lower()
                                if any(rat in dll_name for rat in rat_processes):
                                    suspicious.append(
                                        f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ RAT-DLL: {dll_name} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: "
                                        f"{proc.info['name']} (PID: {proc.info['pid']})"
                                    )
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
                    
        except Exception as e:
            self.log(f"–û–®–ò–ë–ö–ê –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø –ü–ê–ú–Ø–¢–ò: {str(e)}")
        
        if suspicious:
            self.log("‚ïê" * 50)
            self.log("–û–ë–ù–ê–†–£–ñ–ï–ù–û –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ü–†–û–¶–ï–°–°–û–í/DLL:")
            for item in suspicious:
                self.log(f"‚ö†Ô∏è {item}")
            self.log(f"–í–°–ï–ì–û –û–ë–ù–ê–†–£–ñ–ï–ù–û: {len(suspicious)} –£–ì–†–û–ó")
            self.log("‚ïê" * 50)
        else:
            self.log("–ü–ê–ú–Ø–¢–¨ –ß–ò–°–¢–ê: RAT-–í–ù–ï–î–†–ï–ù–ò–Ø –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–´")
            
        return suspicious

    def full_scan(self):
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—É—Ç–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        scan_paths = []
        if os.name == 'nt':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤
            for drive in "CDEFGHIJKLMNOPQRSTUVWXYZ":
                path = f"{drive}:\\"
                if os.path.exists(path):
                    scan_paths.append(path)
        else:
            scan_paths = ["/bin", "/usr", "/etc", "/home", "/tmp"]
        
        total_files = 0
        scanned_files = 0
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        for path in scan_paths:
            if not os.path.exists(path):
                continue
            for root, _, files in os.walk(path):
                total_files += len(files)
        
        self.log(f"–í–°–ï–ì–û –§–ê–ô–õ–û–í –î–õ–Ø –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï: {total_files}")
        
        for path in scan_paths:
            if not os.path.exists(path):
                continue
                
            self.log(f"–°–ö–ê–ù–ò–†–£–Æ: {path}")
            for root, _, files in os.walk(path):
                for file in files:
                    if not self.scan_active:
                        self.stop_btn.config(state=tk.DISABLED)
                        return
                        
                    file_path = os.path.join(root, file)
                    try:
                        if self.process_file(file_path):
                            scanned_files += 1
                    except Exception as e:
                        self.log(f"–û–®–ò–ë–ö–ê –ü–†–ò –û–ë–†–ê–ë–û–¢–ö–ï –§–ê–ô–õ–ê: {file_path} - {str(e)}")
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 100 —Ñ–∞–π–ª–æ–≤
                    if scanned_files % 100 == 0:
                        progress = (scanned_files / total_files) * 100
                        self.threat_level.config(
                            text=f"–£–†–û–í–ï–ù–¨ –£–ì–†–û–ó–´: –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï ({progress:.1f}%)"
                        )
        
        self.log("–°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ó–ê–í–ï–†–®–ï–ù–û")
        self.update_threat_level()
        self.scan_active = False
        self.stop_btn.config(state=tk.DISABLED)
        self.system_restore()  # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    def scan_file(self, file_path):
        self.process_file(file_path)
        self.log("–°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–õ–ê –ó–ê–í–ï–†–®–ï–ù–û")
        self.update_threat_level()
        self.scan_active = False
        self.stop_btn.config(state=tk.DISABLED)
        
    def scan_folder(self, folder_path):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ª–µ—á–µ–Ω–∏–µ–º"""
        total_files = 0
        fixed_threats = 0
        
        # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤
        for root, _, files in os.walk(folder_path):
            total_files += len(files)
        
        self.log(f"–ù–ê–ß–ò–ù–ê–Æ –õ–ï–ß–ï–ù–ò–ï –ü–ê–ü–ö–ò: {folder_path}")
        self.log(f"–û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –§–ê–ô–õ–û–í: {total_files}")
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        for root, _, files in os.walk(folder_path):
            for file in files:
                if not self.scan_active:
                    break
                    
                file_path = os.path.join(root, file)
                try:
                    if self.process_file(file_path, auto_fix=True):
                        fixed_threats += 1
                except Exception as e:
                    self.log(f"–û–®–ò–ë–ö–ê –ü–†–ò –û–ë–†–ê–ë–û–¢–ö–ï –§–ê–ô–õ–ê: {file_path} - {str(e)}")
                    
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress = (fixed_threats / max(total_files, 1)) * 100
                self.threat_level.config(
                    text=f"–£–†–û–í–ï–ù–¨ –£–ì–†–û–ó–´: –õ–ï–ß–ï–ù–ò–ï ({progress:.1f}%)"
                )
    
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.log("\n" + "‚ïê" * 50)
        self.log(f"–õ–ï–ß–ï–ù–ò–ï –ü–ê–ü–ö–ò –ó–ê–í–ï–†–®–ï–ù–û: {folder_path}")
        self.log(f"–û–ë–†–ê–ë–û–¢–ê–ù–û –§–ê–ô–õ–û–í: {total_files}")
        self.log(f"–ù–ï–ô–¢–†–ê–õ–ò–ó–û–í–ê–ù–û –£–ì–†–û–ó: {fixed_threats}")
        self.log("‚ïê" * 50 + "\n")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è RAT
        self.log("–ó–ê–ü–£–°–ö –ü–†–û–¢–û–ö–û–õ–ê –û–ß–ò–°–¢–ö–ò –ü–ê–ü–ö–ò –û–¢ RAT...")
        if self.heal_rat_folder(folder_path):
            self.log("‚úÖ –ü–ê–ü–ö–ê –û–ë–ï–ó–í–†–ï–ñ–ï–ù–ê –û–¢ RAT –£–ì–†–û–ó")
        else:
            self.log("‚ÑπÔ∏è –°–õ–ï–î–û–í RAT –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û")
        
        self.scan_active = False
        self.auto_fix = False
        self.stop_btn.config(state=tk.DISABLED)
        self.update_threat_level()
        self.system_restore()

    def process_file(self, file_path, auto_fix=False):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
            if os.path.getsize(file_path) > 200 * 1024 * 1024:  # 200MB
                return False
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            if self.skip_system_files and self.is_system_file(file_path):
                return False
                
            threat_info = self.analyze_file(file_path)
            if threat_info:
                # –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è RAT
                if "rat" in threat_info['type']:
                    evasive_tech = self.detect_evasive_techniques(file_path)
                    if evasive_tech:
                        threat_info['evasive_tech'] = evasive_tech
                        threat_info['level'] = min(10, threat_info['level'] + 2)
                
                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —É–≥—Ä–æ–∑ —É—Ä–æ–≤–Ω—è 3+
                if threat_info['level'] >= 3:
                    threat_info['advanced'] = self.advanced_threat_analysis(file_path)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                threat_info['file_path'] = file_path
                self.detected_threats.append(threat_info)
                
                if auto_fix:  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–µ—á–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    success = self.heal_threat(file_path, threat_info['type'])
                    if success:
                        self.log(f"‚öïÔ∏è –§–ê–ô–õ –ü–†–û–õ–ï–ß–ï–ù: {file_path}")
                        threat_info['fixed'] = True
                    else:
                        self.log(f"‚õî –ù–ï –£–î–ê–õ–û–°–¨ –ü–†–û–õ–ï–ß–ò–¢–¨: {file_path}")
                    return True
                else:  # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                    self.alert_threat(file_path, threat_info)
                    return True
        except Exception as e:
            self.log(f"–û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –§–ê–ô–õ–ê: {str(e)}")
        return False

    def analyze_file(self, file_path):
        try:
            file_ext = os.path.splitext(file_path)[1].lower()
            file_name = os.path.basename(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            for threat, data in THREAT_DB.items():
                if file_ext in data["extensions"]:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
                    with open(file_path, "rb") as f:
                        content = f.read(10 * 1024 * 1024)  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 10MB
                        
                        # –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                        patterns_found = self.get_matched_patterns(content, data["patterns"])
                        if patterns_found:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                            threat_level = data["threat_level"]
                            if len(patterns_found) > 3:
                                threat_level = min(10, threat_level + 2)
                            elif len(patterns_found) > 1:
                                threat_level = min(10, threat_level + 1)
                                
                            return {
                                "type": threat,
                                "name": data["name"],
                                "level": threat_level,
                                "patterns": patterns_found,
                                "mechanism": data.get("mechanism", ""),
                                "mitigation": data.get("mitigation", "")
                            }
            
            # –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è RAT
            if self.is_rat_heuristic(file_path):
                return {
                    "type": "all_rats",
                    "name": "RAT (—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ)",
                    "level": 9,
                    "patterns": ["HEURISTIC:RAT"],
                    "mechanism": "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ –∫–æ—Å–≤–µ–Ω–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º",
                    "mitigation": "–ù–µ–π—Ç—Ä–∞–ª–∏–∑–æ–≤–∞—Ç—å –±—ç–∫–¥–æ—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"
                }
                
        except Exception as e:
            self.log(f"–û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê –§–ê–ô–õ–ê: {str(e)}")
        return None

    def is_rat_heuristic(self, file_path):
        """–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ RAT"""
        try:
            file_size = os.path.getsize(file_path)
            with open(file_path, "rb") as f:
                content = f.read(min(file_size, 2 * 1024 * 1024))  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 2MB
                
                # –ü—Ä–∏–∑–Ω–∞–∫–∏ —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ/—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                if self.is_packed(file_path) and file_size > 500 * 1024:
                    return True
                    
                # –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if (b"socket" in content and b"connect" in content and b"send" in content):
                    return True
                    
                # –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–∫—Ä—ã—Ç–∏—è
                if (b"hidden" in content and b"process" in content):
                    return True
                    
                # –ü—Ä–∏–∑–Ω–∞–∫–∏ C2 –∫–æ–º–∞–Ω–¥
                if (b"command" in content and b"control" in content):
                    return True
                    
        except:
            pass
        return False

    def heal_threat(self, file_path, threat_type):
        """–õ–µ—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ RAT"""
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
            if self.is_system_file(file_path):
                self.log(f"‚ÑπÔ∏è –°–ò–°–¢–ï–ú–ù–´–ô –§–ê–ô–õ –ü–†–û–ü–£–©–ï–ù: {file_path}")
                return False
                
            # –î–ª—è –≤—Å–µ—Ö RAT –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ
            if "rat" in threat_type.lower() or threat_type == "all_rats":
                return self.heal_rat_file(file_path, threat_type)
                
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_path = file_path + ".matrix_backup"
            if not os.path.exists(backup_path):
                shutil.copy2(file_path, backup_path)
                self.log(f"üìÇ –°–û–ó–î–ê–ù–ê –†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø: {backup_path}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            ext = os.path.splitext(file_path)[1].lower()
            
            if ext in [".vbs", ".ps1", ".bat", ".js", ".txt", ".cfg"]:
                return self.safe_script_healing(file_path, threat_type)
                
            elif ext in [".exe", ".dll", ".sys", ".scr", ".cpl", ".com"]:
                return self.preserve_rat_functionality(file_path)
                
            elif ext in [".jpg", ".png", ".gif"]:
                return self.heal_image_file(file_path)
                
            else:
                return self.generic_healing(file_path, threat_type)
                
        except Exception as e:
            self.log(f"‚ùå –û–®–ò–ë–ö–ê –õ–ï–ß–ï–ù–ò–Ø –§–ê–ô–õ–ê: {str(e)}")
            return False

    def heal_rat_file(self, file_path, threat_type):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ RAT-—Ñ–∞–π–ª–æ–≤ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_path = file_path + ".matrix_backup"
            if not os.path.exists(backup_path):
                shutil.copy2(file_path, backup_path)
                self.log(f"üìÇ –°–û–ó–î–ê–ù–ê –†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø: {backup_path}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            ext = os.path.splitext(file_path)[1].lower()
            
            # –î–ª—è –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
            if ext in [".exe", ".dll", ".sys"]:
                return self.neutralize_rat_executable(file_path)
            
            # –î–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤
            elif ext in [".vbs", ".ps1", ".bat", ".js"]:
                return self.neutralize_rat_script(file_path)
                
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            else:
                return self.generic_rat_neutralization(file_path)
                
        except Exception as e:
            self.log(f"‚ùå –û–®–ò–ë–ö–ê –õ–ï–ß–ï–ù–ò–Ø RAT: {str(e)}")
            return False

    def neutralize_rat_executable(self, file_path):
        """–ù–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö RAT-—Ñ–∞–π–ª–æ–≤ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª
            with open(file_path, "rb") as f:
                content = f.read()

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –±—ç–∫–¥–æ—Ä–æ–≤ –∏–∑ THREAT_DB –¥–ª—è RAT
            signatures = []
            for threat, data in THREAT_DB.items():
                if "rat" in threat or threat in ["lime_rat", "all_rats", "backdoor"]:
                    if "patterns" in data:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –±–∞–π—Ç—ã
                        for pattern in data["patterns"]:
                            try:
                                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                                escaped_pattern = re.escape(pattern)
                                signatures.append(re.compile(escaped_pattern.encode()))
                            except:
                                pass

            modified = False
            for pattern_re in signatures:
                # –ò—â–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è
                matches = list(pattern_re.finditer(content))
                if matches:
                    # –ó–∞–º–µ–Ω—è–µ–º —Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã
                    for match in reversed(matches):
                        start, end = match.span()
                        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ NOP-—ã (0x90) —Ç–∞–∫–æ–π –∂–µ –¥–ª–∏–Ω—ã
                        nop_patch = b"\x90" * (end - start)
                        content = content[:start] + nop_patch + content[end:]
                        modified = True
                        self.log(f"–£–î–ê–õ–ï–ù–ê –°–ò–ì–ù–ê–¢–£–†–ê –ë–≠–ö–î–û–†–ê: {match.group().decode('latin-1', errors='ignore')}")

            # –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: –∑–∞–º–µ–Ω–∞ IP-–∞–¥—Ä–µ—Å–æ–≤ –∏ URL
            ip_pattern = re.compile(rb"\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b")
            url_pattern = re.compile(rb"https?://[^\s]+")

            # –î–ª—è IP: –∑–∞–º–µ–Ω–∏–º –∫–∞–∂–¥—ã–π –æ–∫—Ç–µ—Ç –Ω–∞ 0
            def replace_ip(match):
                return b"0.0.0.0"

            # –î–ª—è URL: –∑–∞–º–µ–Ω–∏–º –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            def replace_url(match):
                return b""

            new_content, ip_count = ip_pattern.subn(replace_ip, content)
            if ip_count > 0:
                content = new_content
                modified = True
                self.log(f"–ó–ê–ú–ï–ù–ï–ù–û IP-–ê–î–†–ï–°–û–í: {ip_count}")

            new_content, url_count = url_pattern.subn(replace_url, content)
            if url_count > 0:
                content = new_content
                modified = True
                self.log(f"–£–î–ê–õ–ï–ù–û URL: {url_count}")

            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            malicious_functions = [
                b"CreateRemoteThread", 
                b"VirtualAllocEx", 
                b"WriteProcessMemory",
                b"ReflectiveLoader",
                b"Meterpreter",
                b"ReverseShell",
                b"SelfRestore",  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π —Å–∞–º–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                b"AutoRepair",
                b"Reinstall",
                b"RestoreFromBackup",
                b"Reinject",
                b"Reactivate"
            ]
            
            for func in malicious_functions:
                if func in content:
                    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é ExitProcess
                    content = content.replace(func, b"ExitProcess")
                    modified = True
                    self.log(f"–ó–ê–ú–ï–ù–ï–ù–ê –í–†–ï–î–û–ù–û–°–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: {func.decode()}")

            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ —Å–∞–º–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            restore_patterns = [
                b"RestoreFromBackup",
                b"ReinstallMalware",
                b"AutoRepair",
                b"SelfHeal",
                b"RecoverFromDisk",
                b"ReinjectDLL",
                b"ReactivateInfection"
            ]
            
            for pattern in restore_patterns:
                if pattern in content:
                    content = content.replace(pattern, b"DISABLED_BY_MATRIX")
                    modified = True
                    self.log(f"–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù –ú–ï–•–ê–ù–ò–ó–ú –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø: {pattern.decode()}")

            if modified:
                with open(file_path, "wb") as f:
                    f.write(content)
                self.log(f"‚úÖ RAT-–§–ê–ô–õ –ù–ï–ô–¢–†–ê–õ–ò–ó–û–í–ê–ù: {file_path}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∑–∞—â–∏—Ç—É
                self.add_persistent_protection(file_path)
                return True
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á—Ç–æ –º–µ–Ω—è—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É
                with open(file_path, "ab") as f:
                    f.write(b"\n\n[NEUTRALIZED_BY_MATRIX_RAT_REMOVAL]\n")
                self.log(f"‚ÑπÔ∏è –ö RAT-–§–ê–ô–õ–£ –î–û–ë–ê–í–õ–ï–ù–ê –°–ò–ì–ù–ê–¢–£–†–ê: {file_path}")
                return True
        except Exception as e:
            self.log(f"‚ùå –û–®–ò–ë–ö–ê –ù–ï–ô–¢–†–ê–õ–ò–ó–ê–¶–ò–ò RAT-EXE: {str(e)}")
            return False

    def neutralize_rat_script(self, file_path):
        """–ù–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤—ã—Ö RAT —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
            encoding = "utf-8"
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    content = f.read()
            except:
                try:
                    with open(file_path, "r", encoding="cp1252") as f:
                        content = f.read()
                    encoding = "cp1252"
                except:
                    with open(file_path, "r", encoding="latin-1") as f:
                        content = f.read()
                    encoding = "latin-1"
            
            original_content = content
            modified = False
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏
            neutralization_patterns = [
                r"CreateObject\(\s?\"WScript\.Shell\"\s?\)",  # –û–ø–∞—Å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                r"\.Run\s?\(",                                # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                r"\.Exec\s?\(",                               # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
                r"eval\s*\(",                                 # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                r"execute\s*\(",                              # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                r"invoke-expression",                         # PowerShell –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                r"downloadfile",                              # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
                r"webclient",                                 # –°–µ—Ç–µ–≤–æ–π –∫–ª–∏–µ–Ω—Ç
                r"DisableFirewall\(",                         # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞
                r"KillAV\(",                                  # –£–±–∏–π—Å—Ç–≤–æ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞
                r"BypassUAC\("                                # –û–±—Ö–æ–¥ UAC
            ]
            
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            restore_patterns = [
                r"RestoreFromBackup",
                r"ReinstallMalware",
                r"AutoRepair",
                r"SelfHeal",
                r"RecoverFromDisk",
                r"Reinstall",
                r"Reactivate",
                r"Reinject",
                r"ReactivateInfection"
            ]
            
            # –ó–∞–º–µ–Ω—è–µ–º –æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            for pattern in neutralization_patterns + restore_patterns:
                if re.search(pattern, content, re.IGNORECASE):
                    content = re.sub(
                        pattern, 
                        f"/* DISABLED_BY_MATRIX_RAT_REMOVAL */",
                        content,
                        flags=re.IGNORECASE
                    )
                    modified = True
                    self.log(f"üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê –û–ü–ê–°–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: {pattern}")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –æ–ø–∞—Å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
            # PowerShell: function ... { ... }
            function_pattern_ps = r"function\s+(\w+)\s*{([^}]*)}"
            for match in re.finditer(function_pattern_ps, content, re.DOTALL | re.IGNORECASE):
                func_name, func_body = match.groups()
                if any(re.search(p, func_body, re.IGNORECASE) for p in neutralization_patterns + restore_patterns):
                    content = content.replace(match.group(0), "/* REMOVED MALICIOUS FUNCTION BY MATRIX */")
                    modified = True
                    self.log(f"üö´ –£–î–ê–õ–ï–ù–ê –í–†–ï–î–û–ù–û–°–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø PowerShell: {func_name}")
            
            # VBS: Sub ... ... End Sub –∏ Function ... ... End Function
            sub_pattern_vbs = r"Sub\s+(\w+)\s*\(.*?\)\s*(.*?)End\s+Sub"
            function_pattern_vbs = r"Function\s+(\w+)\s*\(.*?\)\s*(.*?)End\s+Function"
            for pattern in [sub_pattern_vbs, function_pattern_vbs]:
                for match in re.finditer(pattern, content, re.DOTALL | re.IGNORECASE):
                    func_name, func_body = match.groups()
                    if any(re.search(p, func_body, re.IGNORECASE) for p in neutralization_patterns + restore_patterns):
                        content = content.replace(match.group(0), "' REMOVED MALICIOUS FUNCTION BY MATRIX")
                        modified = True
                        self.log(f"üö´ –£–î–ê–õ–ï–ù–ê –í–†–ï–î–û–ù–û–°–ù–ê–Ø –ü–†–û–¶–ï–î–£–†–ê VBS: {func_name}")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ C2-—Å–µ—Ä–≤–µ—Ä–∞–º
            c2_patterns = [
                r"185\.159\.82\.104", 
                r"185\.231\.154\.78", 
                r"94\.103\.81\.235", 
                r"5\.188\.206\.163"
            ]
            for pattern in c2_patterns:
                if re.search(pattern, content):
                    content = re.sub(pattern, "0.0.0.0", content)
                    modified = True
                    self.log(f"üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù C2-–°–ï–†–í–ï–†: {pattern}")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö URL
            url_pattern = r"https?://[^\s]+"
            urls = re.findall(url_pattern, content)
            malicious_urls = [url for url in urls if "malicious" in url or "c2" in url or "command" in url]
            for url in malicious_urls:
                content = content.replace(url, "http://0.0.0.0")
                modified = True
                self.log(f"üö´ –£–î–ê–õ–ï–ù –í–†–ï–î–û–ù–û–°–ù–´–ô URL: {url}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∑–∞—â–∏—Ç—É
            if modified:
                content = self.add_script_protection(content, file_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if modified:
                with open(file_path, "w", encoding=encoding) as f:
                    f.write(content)
                
                self.log(f"‚úÖ RAT-–°–ö–†–ò–ü–¢ –ù–ï–ô–¢–†–ê–õ–ò–ó–û–í–ê–ù: {file_path}")
                return True
            
            self.log(f"‚ÑπÔ∏è –û–ü–ê–°–ù–´–ï –§–£–ù–ö–¶–ò–ò –ù–ï –ù–ê–ô–î–ï–ù–´: {file_path}")
            return False
            
        except Exception as e:
            self.log(f"‚ùå –û–®–ò–ë–ö–ê –õ–ï–ß–ï–ù–ò–Ø RAT-–°–ö–†–ò–ü–¢–ê: {str(e)}")
            return False

    def generic_rat_neutralization(self, file_path):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ RAT"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            with open(file_path, "ab") as f:
                f.write(b"\n\n[NEUTRALIZED_BY_MATRIX_RAT_REMOVAL]\n")
            self.log(f"‚ÑπÔ∏è –ö –§–ê–ô–õ–£ –î–û–ë–ê–í–õ–ï–ù–ê –°–ò–ì–ù–ê–¢–£–†–ê: {file_path}")
            return True
        except:
            return False

    def add_persistent_protection(self, file_path):
        """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∑–∞—â–∏—Ç—É –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç–Ω—É—é —Å–µ–∫—Ü–∏—é –≤ PE-—Ñ–∞–π–ª
            pe = pefile.PE(file_path)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
            section_name = ".matrix"
            section = pefile.SectionStructure(pe.__IMAGE_SECTION_HEADER_format__)
            section.__unpack__(bytearray(section.sizeof()))
            section.Name = section_name.encode().ljust(8, b'\x00')
            section.Misc_VirtualSize = 0x1000
            section.VirtualAddress = pe.sections[-1].VirtualAddress + pe.sections[-1].Misc_VirtualSize
            section.SizeOfRawData = 0x200
            section.PointerToRawData = pe.sections[-1].PointerToRawData + pe.sections[-1].SizeOfRawData
            section.Characteristics = 0x60000020  # CNT_CODE | MEM_EXECUTE | MEM_READ
            
            # –ó–∞—â–∏—Ç–Ω—ã–π –∫–æ–¥ (–ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π)
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–∂–Ω—ã–π –∞–Ω—Ç–∏-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥
            section_data = b"\x33\xC0" + b"\xC2\x04\x00"  # XOR EAX, EAX; RET 4
            section_data = section_data.ljust(0x200, b'\x90')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é
            pe.sections.append(section)
            pe.__structures__.append(section)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
            pe.set_bytes_at_offset(section.PointerToRawData, section_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            pe.OPTIONAL_HEADER.SizeOfImage += 0x1000
            pe.OPTIONAL_HEADER.CheckSum = 0  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            new_pe_data = pe.write()
            with open(file_path, "wb") as f:
                f.write(new_pe_data)
                
            self.log(f"üõ°Ô∏è –î–û–ë–ê–í–õ–ï–ù–ê –ü–û–°–¢–û–Ø–ù–ù–ê–Ø –ó–ê–©–ò–¢–ê –í –§–ê–ô–õ: {file_path}")
            return True
        except Exception as e:
            self.log(f"‚ö†Ô∏è –ù–ï –£–î–ê–õ–û–°–¨ –î–û–ë–ê–í–ò–¢–¨ –ó–ê–©–ò–¢–£: {str(e)}")
            return False

    def add_script_protection(self, content, file_path):
        """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –≤ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            ext = os.path.splitext(file_path)[1].lower()
            
            if ext == '.ps1':
                # PowerShell –∑–∞—â–∏—Ç–∞
                protection_code = '''
                # MATRIX PERMANENT PROTECTION
                $maliciousPatterns = @(
                    "CreateObject\(`"WScript\.Shell`"\)",
                    "\.Run\s?\(",
                    "\.Exec\s?\(",
                    "eval\s*\(",
                    "execute\s*\(",
                    "invoke-expression",
                    "downloadfile",
                    "webclient",
                    "DisableFirewall\(",
                    "KillAV\(",
                    "BypassUAC\(",
                    "RestoreFromBackup",
                    "ReinstallMalware",
                    "AutoRepair",
                    "SelfHeal"
                )
                
                $content = Get-Content -LiteralPath $MyInvocation.MyCommand.Path -Raw
                $protectionCode = $MyInvocation.MyCommand.ScriptBlock.ToString()
                $contentWithoutSelf = $content.Replace($protectionCode, '')
                
                foreach ($pattern in $maliciousPatterns) {
                    if ($contentWithoutSelf -match $pattern) {
                        Write-Output "MATRIX PROTECTION: MALICIOUS CODE DETECTED - $pattern"
                        exit 1
                    }
                }
                '''
                content = protection_code + '\n' + content
                self.log(f"üõ°Ô∏è –î–û–ë–ê–í–õ–ï–ù–ê –ó–ê–©–ò–¢–ê –í POWERSHELL –°–ö–†–ò–ü–¢")
                
            elif ext == '.vbs':
                # VBScript –∑–∞—â–∏—Ç–∞
                protection_code = '''
                ' MATRIX PERMANENT PROTECTION
                maliciousPatterns = Array( _
                    "CreateObject\s?\(\s?""WScript\.Shell\s?""\)", _
                    "\.Run\s?\(", _
                    "\.Exec\s?\(", _
                    "eval\s?\(", _
                    "execute\s?\(", _
                    "downloadfile", _
                    "webclient", _
                    "DisableFirewall\(", _
                    "KillAV\(", _
                    "BypassUAC\(", _
                    "RestoreFromBackup", _
                    "ReinstallMalware", _
                    "AutoRepair", _
                    "SelfHeal" _
                )
                
                Set fso = CreateObject("Scripting.FileSystemObject")
                Set file = fso.OpenTextFile(WScript.ScriptFullName, 1)
                content = file.ReadAll
                file.Close
                
                protectionCode = "MATRIX PERMANENT PROTECTION"
                startPos = InStr(content, protectionCode)
                endPos = InStr(startPos, content, "End Sub")
                If endPos = 0 Then endPos = Len(content)
                contentWithoutSelf = Left(content, startPos-1) & Mid(content, endPos)
                
                For Each pattern In maliciousPatterns
                    Set regex = New RegExp
                    regex.Pattern = pattern
                    regex.IgnoreCase = True
                    regex.Global = True
                    
                    If regex.Test(contentWithoutSelf) Then
                        MsgBox "MATRIX PROTECTION: MALICIOUS CODE DETECTED - " & pattern, vbCritical
                        WScript.Quit 1
                    End If
                Next
                '''
                content = protection_code + '\n' + content
                self.log(f"üõ°Ô∏è –î–û–ë–ê–í–õ–ï–ù–ê –ó–ê–©–ò–¢–ê –í VBS –°–ö–†–ò–ü–¢")
                
            return content
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û–®–ò–ë–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ó–ê–©–ò–¢–´: {str(e)}")
            return content

    def heal_rat_folder(self, folder_path):
        """–õ–µ—á–µ–Ω–∏–µ –≤—Å–µ–π –ø–∞–ø–∫–∏ —Å RAT –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –º–∞–ª–≤–∞—Ä–∏"""
        self.log(f"‚öïÔ∏è –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–†–û–¢–û–ö–û–õ–ê RAT HEALER: {folder_path}")
        
        healed_files = 0
        rat_family_counts = {}
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
        for root, _, files in os.walk(folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                ext = os.path.splitext(file)[1].lower()
                
                # –õ–µ—á–∏–º —Ç–æ–ª—å–∫–æ –æ–ø–∞—Å–Ω—ã–µ —Ñ–∞–π–ª—ã
                if ext in [".exe", ".dll", ".vbs", ".ps1", ".bat", ".js"]:
                    try:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —É–≥—Ä–æ–∑—ã
                        threat_info = self.analyze_file(file_path)
                        if threat_info and "rat" in threat_info['type']:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–º–µ–π—Å—Ç–≤–æ RAT
                            rat_family = self.detect_rat_family(file_path)
                            if not rat_family:
                                rat_family = "Unknown"
                            
                            # –õ–µ—á–∏–º —Ñ–∞–π–ª
                            if self.heal_rat_file(file_path, threat_info['type']):
                                healed_files += 1
                                rat_family_counts[rat_family] = rat_family_counts.get(rat_family, 0) + 1
                    except:
                        pass
        
        # –£–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –º–∞–ª–≤–∞—Ä–∏
        self.log("–£–î–ê–õ–ï–ù–ò–ï –†–ï–ó–ï–†–í–ù–´–• –ö–û–ü–ò–ô –ú–ê–õ–í–ê–†–ò...")
        backup_patterns = [
            "*_backup", "*_old", "*.bak", "*.back", 
            "*.copy", "*.orig", "*.tmp", "*.temp",
            "*restore*", "*recovery*", "*backup*"
        ]
        
        deleted_backups = 0
        for pattern in backup_patterns:
            for backup_file in Path(folder_path).rglob(pattern):
                try:
                    if backup_file.is_file():
                        backup_file.unlink()
                        deleted_backups += 1
                        self.log(f"üóëÔ∏è –£–î–ê–õ–ï–ù–ê –†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø: {backup_file}")
                except:
                    pass
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
        report_path = os.path.join(folder_path, "RAT_HEAL_REPORT.txt")
        with open(report_path, "w") as f:
            f.write("–û–¢–ß–ï–¢ –û –õ–ï–ß–ï–ù–ò–ò RAT –£–ì–†–û–ó\n")
            f.write(f"–ü–∞–ø–∫–∞: {folder_path}\n")
            f.write(f"–î–∞—Ç–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–ü—Ä–æ–ª–µ—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {healed_files}\n")
            f.write(f"–£–¥–∞–ª–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {deleted_backups}\n")
            
            if rat_family_counts:
                f.write("\n–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –°–ï–ú–ï–ô–°–¢–í–ê–ú RAT:\n")
                for family, count in rat_family_counts.items():
                    f.write(f"- {family}: {count} —Ñ–∞–π–ª–æ–≤\n")
            
            f.write("\n–°—Ç–∞—Ç—É—Å: –û–ü–ê–°–ù–´–ï –§–£–ù–ö–¶–ò–ò –£–î–ê–õ–ï–ù–´\n")
            f.write("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª RAT —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n")
            f.write("–ú–ï–•–ê–ù–ò–ó–ú–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´\n")
        
        self.log(f"‚úÖ –ü–ê–ü–ö–ê –ü–†–û–õ–ï–ß–ï–ù–ê –û–¢ RAT –£–ì–†–û–ó: {healed_files} —Ñ–∞–π–ª–æ–≤")
        self.log(f"üóëÔ∏è –£–î–ê–õ–ï–ù–û –†–ï–ó–ï–†–í–ù–´–• –ö–û–ü–ò–ô –ú–ê–õ–í–ê–†–ò: {deleted_backups}")
        self.log(f"üìÑ –û–¢–ß–ï–¢ –°–û–•–†–ê–ù–Å–ù: {report_path}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        MONITORED_FOLDERS[folder_path] = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if self.monitoring_active:
            self.start_folder_monitoring(folder_path)
            
        return healed_files > 0

    def start_folder_monitoring(self, folder_path):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if folder_path in MONITORED_FOLDERS:
            self.log(f"üîí –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–ü–ö–ò –£–ñ–ï –ê–ö–¢–ò–í–ï–ù: {folder_path}")
            return
            
        self.log(f"üîí –ê–ö–¢–ò–í–ò–†–£–Æ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–ü–ö–ò: {folder_path}")
        MONITORED_FOLDERS[folder_path] = True
        
        monitor_thread = threading.Thread(
            target=self.monitor_folder_for_threats,
            args=(folder_path,),
            daemon=True
        )
        monitor_thread.start()

    def monitor_folder_for_threats(self, folder_path):
        """–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø–∞–ø–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        known_hashes = {}
        self.log(f"üîç –ù–ê–ß–ò–ù–ê–Æ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–ü–ö–ò: {folder_path}")
        
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        for root, _, files in os.walk(folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                if self.is_system_file(file_path):
                    continue
                    
                file_hash = self.calculate_hash(file_path)
                known_hashes[file_path] = file_hash
        
        # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        while folder_path in MONITORED_FOLDERS and MONITORED_FOLDERS[folder_path]:
            try:
                time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                
                for root, _, files in os.walk(folder_path):
                    for file in files:
                        file_path = os.path.join(root, file)
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
                        if self.is_system_file(file_path):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                        if file_path not in known_hashes:
                            threat_info = self.analyze_file(file_path)
                            if threat_info:
                                self.log(f"‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ù–û–í–ê–Ø –£–ì–†–û–ó–ê: {file_path}")
                                self.heal_rat_file(file_path, threat_info['type'])
                            known_hashes[file_path] = self.calculate_hash(file_path)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö
                        else:
                            current_hash = self.calculate_hash(file_path)
                            if current_hash != known_hashes[file_path]:
                                self.log(f"‚ö†Ô∏è –§–ê–ô–õ –ò–ó–ú–ï–ù–ï–ù: {file_path}")
                                threat_info = self.analyze_file(file_path)
                                if threat_info:
                                    self.log(f"‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –£–ì–†–û–ó–´: {file_path}")
                                    self.heal_rat_file(file_path, threat_info['type'])
                                known_hashes[file_path] = current_hash
            except Exception as e:
                self.log(f"–û–®–ò–ë–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê: {str(e)}")
        
        self.log(f"‚õî –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–ü–ö–ò –û–°–¢–ê–ù–û–í–õ–ï–ù: {folder_path}")

    def safe_script_healing(self, file_path, threat_type):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ RAT"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
            encoding = "utf-8"
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    content = f.read()
            except:
                try:
                    with open(file_path, "r", encoding="cp1252") as f:
                        content = f.read()
                    encoding = "cp1252"
                except:
                    with open(file_path, "r", encoding="latin-1") as f:
                        content = f.read()
                    encoding = "latin-1"
            
            modified = False
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—ç–∫–¥–æ—Ä—ã –∏ –æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            backdoor_patterns = [
                r"CreateObject\(\s?\"WScript\.Shell\"\s?\)",
                r"\.Run\s?\(",
                r"\.Exec\s?\(",
                r"Start-Process",
                r"System\.Diagnostics\.Process",
                r"eval\s?\(",
                r"Invoke-Expression",
                r"ReflectiveInjection",
                r"ProcessHollow",
                r"MetasploitPayload",
                r"CobaltStrike",
                r"DownloadFile\(",
                r"WebClient\(",
                r"ShellExecute\(",
                r"WinExec\(",
                r"CreateProcess\(",
                r"Shellcode\(",
                r"Meterpreter\(",
                r"PrivEscalation\(",
                r"CredDump\(",
                r"DisableFirewall\(",
                r"KillAV\(",
                r"BypassUAC\("
            ]
            
            for pattern in backdoor_patterns:
                if re.search(pattern, content, re.IGNORECASE):
                    content = re.sub(pattern, "// DISABLED_BY_MATRIX_DEFENDER", content, flags=re.IGNORECASE)
                    modified = True
                    self.log(f"üö´ –£–î–ê–õ–ï–ù –ë–≠–ö–î–û–†: {pattern}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if modified:
                with open(file_path, "w", encoding=encoding) as f:
                    f.write(content)
                
                self.log(f"‚úÖ –§–ê–ô–õ –ü–†–û–õ–ï–ß–ï–ù –ë–ï–ó –ü–û–¢–ï–†–ò –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê: {file_path}")
                return True
            
            self.log(f"‚ÑπÔ∏è –û–ü–ê–°–ù–´–ï –§–£–ù–ö–¶–ò–ò –ù–ï –ù–ê–ô–î–ï–ù–´: {file_path}")
            return False
            
        except Exception as e:
            self.log(f"‚ùå –û–®–ò–ë–ö–ê –õ–ï–ß–ï–ù–ò–Ø –°–ö–†–ò–ü–¢–ê: {str(e)}")
            return False

    def preserve_rat_functionality(self, file_path):
        """–õ–µ—á–µ–Ω–∏–µ EXE-—Ñ–∞–π–ª–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –æ –ª–µ—á–µ–Ω–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
            with open(file_path, "ab") as f:
                f.write(b"\n\n[SAFE_AFTER_BACKDOOR_REMOVAL_BY_MATRIX_DEFENDER]\n")
            self.log(f"‚ÑπÔ∏è –ö –§–ê–ô–õ–£ –î–û–ë–ê–í–õ–ï–ù–ê –°–ò–ì–ù–ê–¢–£–†–ê: {file_path}")
            return True
        except:
            return False

    def heal_image_file(self, file_path):
        """–õ–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—É–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö)"""
        try:
            with open(file_path, "r+b") as f:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                header = f.read(4)
                f.seek(0)
                
                # JPEG
                if header == b"\xFF\xD8\xFF\xE0":
                    # –û–±—Ä–µ–∑–∞–µ–º —Ñ–∞–π–ª –¥–æ –º–∞—Ä–∫–µ—Ä–∞ EOI
                    f.seek(0, os.SEEK_END)
                    size = f.tell()
                    f.seek(-2, os.SEEK_END)
                    if f.read(2) != b"\xFF\xD9":
                        f.seek(0)
                        content = f.read()
                        eoi_pos = content.rfind(b"\xFF\xD9")
                        if eoi_pos != -1:
                            f.seek(0)
                            f.write(content[:eoi_pos + 2])
                            f.truncate(eoi_pos + 2)
                            self.log(f"‚úÖ JPEG –û–ß–ò–©–ï–ù: {file_path}")
                            return True
                
                # PNG
                elif header == b"\x89PNG":
                    # –ò—â–µ–º –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
                    f.seek(0, os.SEEK_END)
                    size = f.tell()
                    f.seek(-12, os.SEEK_END)
                    if f.read(12) != b"IEND\xAE\x42\x60\x82":
                        f.seek(0)
                        content = f.read()
                        iend_pos = content.rfind(b"IEND\xAE\x42\x60\x82")
                        if iend_pos != -1:
                            f.seek(0)
                            f.write(content[:iend_pos + 12])
                            f.truncate(iend_pos + 12)
                            self.log(f"‚úÖ PNG –û–ß–ò–©–ï–ù: {file_path}")
                            return True
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                f.seek(0, os.SEEK_END)
                f.write(b"\n\n[NEUTRALIZED_BY_MATRIX_HEALER]\n")
                self.log(f"‚ÑπÔ∏è –ö –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Æ –î–û–ë–ê–í–õ–ï–ù–ê –°–ò–ì–ù–ê–¢–£–†–ê: {file_path}")
                return True
        except:
            return False

    def generic_healing(self, file_path, threat_type):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        try:
            with open(file_path, "ab") as f:
                f.write(b"\n\n[SAFE_AFTER_NEUTRALIZATION_BY_MATRIX_DEFENDER]\n")
            self.log(f"‚ÑπÔ∏è –ö –§–ê–ô–õ–£ –î–û–ë–ê–í–õ–ï–ù–ê –°–ò–ì–ù–ê–¢–£–†–ê: {file_path}")
            return True
        except:
            return False

    def system_restore(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        if os.name != 'nt':
            self.log("–¢–û–ß–ö–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –î–û–°–¢–£–ü–ù–´ –¢–û–õ–¨–ö–û –ù–ê WINDOWS")
            return False
            
        try:
            self.log("–°–û–ó–î–ê–ù–ò–ï –¢–û–ß–ö–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´...")
            restore_point = f"MatrixDefender_{time.strftime('%Y%m%d%H%M%S')}"
            subprocess.run(
                ["powershell", "Checkpoint-Computer", "-Description", 
                f"'{restore_point}'", "-RestorePointType", "MODIFY_SETTINGS"],
                check=True,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
            self.log(f"‚úÖ –¢–û–ß–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –°–û–ó–î–ê–ù–ê: {restore_point}")
            return True
        except Exception as e:
            self.log(f"‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –¢–û–ß–ö–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø: {str(e)}")
            return False

    def is_system_file(self, file_path):
        """–¢–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∏—Å—Ç–µ–º—ã
            system_root = os.environ.get('SystemRoot', 'C:\\Windows').lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
            lower_path = file_path.lower()
            if system_root not in lower_path:
                return False  # –§–∞–π–ª –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
            file_name = os.path.basename(file_path)
            parent_dir = os.path.dirname(file_path).lower()
            
            for sys_dir, files in SYSTEM_WHITELIST.items():
                sys_dir_lower = sys_dir.lower()
                if sys_dir_lower in parent_dir:
                    if file_name in files:
                        return True
                        
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö DLL
            if file_name.endswith('.dll'):
                with open(file_path, "rb") as f:
                    header = f.read(16)
                    for sig in SYSTEM_SIGNATURES:
                        if header.startswith(sig):
                            return True
        except:
            pass
        return False

    def has_system_attributes(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Windows)"""
        if os.name != 'nt':
            return False
            
        try:
            attrs = ctypes.windll.kernel32.GetFileAttributesW(file_path)
            return attrs & 0x4 == 0x4  # FILE_ATTRIBUTE_SYSTEM
        except:
            return False

    def get_matched_patterns(self, content, patterns):
        """–ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞"""
        matched = []
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                text_content = content.decode('utf-8')
            except:
                text_content = content.decode('latin-1', errors='ignore')
                
            for pattern in patterns:
                if re.search(pattern, text_content):
                    matched.append(pattern)
        except:
            # –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –Ω–µ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            for pattern in patterns:
                try:
                    if re.search(pattern.encode(), content):
                        matched.append(pattern)
                except:
                    pass
        return matched

    def advanced_threat_analysis(self, file_path):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑"""
        analysis = {
            "embedded_chat": [],
            "persistence": [],
            "network_activity": [],
            "anti_debug": [],
            "packed": False
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–ø–∞–∫–æ–≤–∫—É
            analysis["packed"] = self.is_packed(file_path)
            
            # –ü–æ–∏—Å–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —á–∞—Ç-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            with open(file_path, "rb") as f:
                content = f.read(5 * 1024 * 1024)  # –ü–µ—Ä–≤—ã–µ 5MB
                
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                try:
                    text_content = content.decode('utf-8')
                except:
                    text_content = content.decode('latin-1', errors='ignore')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                for pattern in CHAT_PATTERNS:
                    if re.search(pattern, text_content):
                        analysis["embedded_chat"].append(pattern)
                        
                # –ü–æ–∏—Å–∫ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                persistence_patterns = [
                    r"reg\s+add", r"schtasks", r"Startup", r"RunKey",
                    r"autostart", r"service\s+install", r"task\s+scheduler"
                ]
                for pattern in persistence_patterns:
                    if re.search(pattern, text_content, re.IGNORECASE):
                        analysis["persistence"].append(pattern)
                        
                # –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                network_patterns = [
                    r"http\.request", r"socket\.connect", r"ftp\.put",
                    r"udp\.send", r"dns\.resolve", r"port\s+scan"
                ]
                for pattern in network_patterns:
                    if re.search(pattern, text_content, re.IGNORECASE):
                        analysis["network_activity"].append(pattern)
                        
                # –ê–Ω—Ç–∏-–æ—Ç–ª–∞–¥–∫–∞
                anti_debug_patterns = [
                    r"IsDebuggerPresent", r"CheckRemoteDebugger", r"OutputDebugString",
                    r"CloseHandle", r"ZwSetInformationThread", r"int\s+0x2d"
                ]
                for pattern in anti_debug_patterns:
                    if re.search(pattern, text_content, re.IGNORECASE):
                        analysis["anti_debug"].append(pattern)
                        
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            
        return analysis

    def is_packed(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —É–ø–∞–∫–æ–≤–∞–Ω –ª–∏ —Ñ–∞–π–ª"""
        try:
            with open(file_path, "rb") as f:
                content = f.read(1024)
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä —É–ø–∞–∫–æ–≤—â–∏–∫–æ–≤
            packers = [
                b"UPX!", b"ASPack", b"FSG!", b"PECompact", 
                b"MPRESS", b"VProtect", b"Obsidium", b"Armadillo"
            ]
            
            for packer in packers:
                if packer in content:
                    return True
                    
            # –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: –Ω–∏–∑–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ–¥–∞/–¥–∞–Ω–Ω—ã—Ö
            if os.path.getsize(file_path) > 100 * 1024:
                try:
                    pe = pefile.PE(file_path)
                    code_size = 0
                    data_size = 0
                    
                    for section in pe.sections:
                        if b"text" in section.Name or b"code" in section.Name:
                            code_size += section.SizeOfRawData
                        else:
                            data_size += section.SizeOfRawData
                    
                    if data_size > 10 * code_size:  # –ú–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö, –º–∞–ª–æ –∫–æ–¥–∞
                        return True
                except:
                    pass
                    
        except:
            pass
        return False

    def alert_threat(self, file_path, threat_info):
        alert_msg = f"""
        ‚ö†Ô∏è MATRIX DEFENDER ALERT ‚ö†Ô∏è
        
        –¢–ò–ü –£–ì–†–û–ó–´: {threat_info['name']}
        –£–†–û–í–ï–ù–¨ –û–ü–ê–°–ù–û–°–¢–ò: {self.get_threat_level_name(threat_info['level'])} ({threat_info['level']}/10)
        –§–ê–ô–õ: {os.path.basename(file_path)}
        –ü–£–¢–¨: {file_path}
        
        –ú–ï–•–ê–ù–ò–ó–ú –î–ï–ô–°–¢–í–ò–Ø:
        {threat_info['mechanism']}
        
        –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:
        {', '.join(threat_info['patterns'][:5])}{'...' if len(threat_info['patterns']) > 5 else ''}
        """
        
        # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–≥—Ä–æ–∑ —É—Ä–æ–≤–Ω—è 4+
        if threat_info['level'] >= 4:
            alert_msg += f"""
        üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –£–ì–†–û–ó–´ –£–†–û–í–ù–Ø {threat_info['level']}:
        –ú–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è: {threat_info['mechanism']}
        –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {threat_info['mitigation']}
        """
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —É–≥—Ä–æ–∑
            if 'advanced' in threat_info:
                adv = threat_info['advanced']
                if adv['embedded_chat']:
                    alert_msg += f"–í–Ω–µ–¥—Ä—ë–Ω–Ω—ã–µ —á–∞—Ç-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(adv['embedded_chat'][:3])}\n"
                if adv['persistence']:
                    alert_msg += f"–ú–µ—Ö–∞–Ω–∏–∑–º—ã –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {', '.join(adv['persistence'][:3])}\n"
                if adv['network_activity']:
                    alert_msg += f"–°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {', '.join(adv['network_activity'][:3])}\n"
                if adv['anti_debug']:
                    alert_msg += f"–ê–Ω—Ç–∏-–æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏: {', '.join(adv['anti_debug'][:3])}\n"
                if adv['packed']:
                    alert_msg += "–§–∞–π–ª —É–ø–∞–∫–æ–≤–∞–Ω/–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω: –î–∞\n"
        
        self.log(alert_msg)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ª–µ—á–µ–Ω–∏–µ–º (–±–µ–∑ –∏–∫–æ–Ω–∫–∏)
        response = messagebox.askyesno(
            "–ú–ê–¢–†–ò–¶–ê: –û–ë–ù–ê–†–£–ñ–ï–ù–ê –£–ì–†–û–ó–ê",
            f"–û–±–Ω–∞—Ä—É–∂–µ–Ω {threat_info['name']} (—É—Ä–æ–≤–µ–Ω—å {threat_info['level']}/10)\n\n"
            f"–§–∞–π–ª: {os.path.basename(file_path)}\n"
            f"–ü—É—Ç—å: {file_path}\n\n"
            "–í—ã–ª–µ—á–∏—Ç—å —É–≥—Ä–æ–∑—É?"
        )
        
        if response:
            if self.heal_threat(file_path, threat_info['type']):
                self.log(f"‚öïÔ∏è –£–ì–†–û–ó–ê –õ–ï–ß–ï–ù–ò–ï –£–°–ü–ï–®–ù–û: {file_path}")
            else:
                self.log(f"‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –í–´–õ–ï–ß–ò–¢–¨: {file_path}")
        else:
            self.log(f"‚ö†Ô∏è –£–ì–†–û–ó–ê –ü–†–û–ò–ì–ù–û–†–ò–†–û–í–ê–ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú: {file_path}")

    def update_threat_level(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —É–≥—Ä–æ–∑—ã"""
        if not self.detected_threats:
            self.threat_level.config(text="–£–†–û–í–ï–ù–¨ –£–ì–†–û–ó–´: –ù–ò–ó–ö–ò–ô", fg="#00ff00")
            return
            
        max_level = max(threat['level'] for threat in self.detected_threats)
        
        if max_level >= 8:
            color = "#ff0000"
            level_name = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
        elif max_level >= 5:
            color = "#ff6600"
            level_name = "–í–´–°–û–ö–ò–ô"
        else:
            color = "#ffff00"
            level_name = "–°–†–ï–î–ù–ò–ô"
            
        self.threat_level.config(
            text=f"–£–†–û–í–ï–ù–¨ –£–ì–†–û–ó–´: {level_name}",
            fg=color
        )
        self.log(f"–ù–ê–ò–ë–û–õ–ï–ï –û–ü–ê–°–ù–ê–Ø –£–ì–†–û–ó–ê: –£–†–û–í–ï–ù–¨ {max_level}/10")

    def get_threat_level_name(self, level):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è —É–≥—Ä–æ–∑—ã"""
        if level >= 9:
            return "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
        elif level >= 7:
            return "–í–´–°–û–ö–ò–ô"
        elif level >= 5:
            return "–ü–û–í–´–®–ï–ù–ù–´–ô"
        elif level >= 3:
            return "–°–†–ï–î–ù–ò–ô"
        else:
            return "–ù–ò–ó–ö–ò–ô"

    def deep_rat_scan(self):
        """–ì–ª—É–±–æ–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è RAT"""
        self.log("–ó–ê–ü–£–°–ö –ì–õ–£–ë–û–ö–û–ì–û –°–ö–ê–ù–ê –î–õ–Ø RAT...")
        self.log("–ò–ì–ù–û–†–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–ù–´–• –§–ê–ô–õ–û–í...")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.skip_system_files = True
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.full_scan()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.skip_system_files = False

    def calculate_hash(self, file_path):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞"""
        try:
            sha256 = hashlib.sha256()
            with open(file_path, "rb") as f:
                while chunk := f.read(4096):
                    sha256.update(chunk)
            return sha256.hexdigest()
        except:
            return "error"

    def detect_rat_family(self, file_path):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–º–µ–π—Å—Ç–≤–∞ RAT –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º"""
        signatures = {
            b"LimeRAT": "LimeRAT",
            b"QuasarRAT": "Quasar",
            b"AsyncRAT": "Async",
            b"NjRat": "NjRat",
            b"DarkComet": "DarkComet",
            b"Remcos": "Remcos",
            b"Warzone": "Warzone",
            b"NetWire": "NetWire",
            b"PoisonIvy": "PoisonIvy"
        }
        try:
            with open(file_path, "rb") as f:
                content = f.read(8192)  # –ü–µ—Ä–≤—ã–µ 8KB
                for sig, name in signatures.items():
                    if sig in content:
                        return name
        except:
            pass
        return "GenericRAT"

if __name__ == "__main__":
    app = MatrixDefender()
    app.mainloop()
